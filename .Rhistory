# recupere les noms de colonnes possedant le pattern y
var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(y)])
# version Fevrier 2021 : Pour chaque colonne recuperée, verifie si la colonne x<- "E3_variation_prix_cereale" est different de "Oui", alors donne la valeur "SL"
for(i in var.to.change){
LOC_AGG_DT[[i]][LOC_AGG_DT[[x]] != "Oui"] <- "SL"
}
LOC_AGG_DT[E8_proportion_population_acces_terre %in% c("Aucun (0%)","Ne sais pas", "NC")]$E8_acces_terre_cultivation <- "SL"
# Version fevrier 2021 : ajout de modalité de cultivation de la terre, visible si la population a accès à la terre
LOC_AGG_DT$E8_modalite_cultivation[LOC_AGG_DT$E8_acces_terre_cultivation != "Oui"] <-"SL"
varnames.sl = 'E7_perte_acces_activites_subsistance_'
if(any(grep(varnames.sl, names(LOC_AGG_DT)))){
var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(varnames.sl)])
for(j in var.to.change){
LOC_AGG_DT[[j]][LOC_AGG_DT$E7_acces_activites_subsistance_habituelles != "Non"] <- "SL" }
}
varnames.sl = c('Activités de pêche/ chasse/Cueillette_',
'Agriculture pour vente_',
'Agriculture/pêche/élevage de subsistance_',
'Exploitation minière artisanale_',
'Petit commerce ',
'Pêche ou élevage pour vente_',
'Travail journalier',
'Travail permanent ',
'Envois de fonds ',
'Pas de reponse / ne souhaite pas repondre_')
varnames = c("E7_perte_acces_activites_subsistance_chasse_cueillette",
"E7_perte_acces_activites_subsistance_agriculture_vente",
"E7_perte_acces_activites_subsistance_agriculture_subsistance",
"E7_perte_acces_activites_subsistance_exploitation_miniere",
"E7_perte_acces_activites_subsistance_petit_commerce",
"E7_perte_acces_activites_subsistance_peche",
"E7_perte_acces_activites_subsistance_travail_journalier",
"E7_perte_acces_activites_subsistance_gagner_salaire",
"E7_perte_acces_activites_subsistance_envoi_fonds",
"E7_perte_acces_activites_subsistance_nsr")
for(i in 1:length(varnames)){
if(any(grep(varnames.sl[i], names(LOC_AGG_DT)))){
var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(varnames.sl[i])])
for(j in var.to.change){
LOC_AGG_DT[[j]][LOC_AGG_DT[[varnames[i]]] != "1"] <- "SL"
}
}
}
LOC_AGG_DT$F1_lieu_de_soin_autre[LOC_AGG_DT$F1_lieu_de_soin != "Autre (préciser)"] <- "SL"
levels_to_skip = c(
"Plus d'une demi-journée / pas de centre de santé disponible",
"Pas de réponse / ne souhaite pas répondre",
"Je ne sais pas",
"NC"
)
x = "F1_temps_pied_structure_sante"
y = "F1_type_structure_sante_"
var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(y)])
for(i in var.to.change){
LOC_AGG_DT[[i]][LOC_AGG_DT[[x]] %in% levels_to_skip] <- "SL"
}
LOC_AGG_DT$F1_type_structure_sante_autre_preciser[LOC_AGG_DT$F1_type_structure_sante_autre != "1"] <- "SL"
LOC_AGG_DT$F1_type_structure_sante_autre_preciser[LOC_AGG_DT$F1_type_structure_sante_autre != "1"] <- "SL"
LOC_AGG_DT$F2_limite_acces_soins_autre_preciser[LOC_AGG_DT$F2_limite_acces_soins_autre != "1"] <- "SL"
LOC_AGG_DT$F3_principal_probleme_sante_autre[LOC_AGG_DT$F3_principal_probleme_sante != "Autre"] <- "SL"
LOC_AGG_DT$F4_cause_augmentation_mortalite[LOC_AGG_DT$F4_augmentation_mortalite != "Oui"] <- "SL"
LOC_AGG_DT$F4_cause_augmentation_mortalite_autre[LOC_AGG_DT$F4_cause_augmentation_mortalite != "Autre"] <- "SL"
LOC_AGG_DT$G1_incident_pillage_maison_durant_attaques[LOC_AGG_DT$E5_presence_pillages_attaques != "Oui"] <- "SL"
LOC_AGG_DT$G1_type_incident_civils_tues_blesses[LOC_AGG_DT$G1_incident_civils_tues_blesses != "Oui"] <- "SL"
LOC_AGG_DT$G2_inquietude_femmes_majeures_autre[LOC_AGG_DT$G2_inquietude_femmes_majeures != "Autre (Spécifier)"] <- "SL"
LOC_AGG_DT$G2_inquietude_femmes_mineures_autre[LOC_AGG_DT$G2_inquietude_femmes_mineures != "Autre (Spécifier)"] <- "SL"
LOC_AGG_DT$G2_inquietude_hommes_majeurs_autre[LOC_AGG_DT$G2_inquietude_hommes_majeurs != "Autre (Spécifier)"] <- "SL"
LOC_AGG_DT$G2_inquietude_hommes_mineurs_autre[LOC_AGG_DT$G2_inquietude_hommes_mineurs != "Autre (Spécifier)"] <- "SL"
LOC_AGG_DT$G5_liberte_mouvements_non_raison[LOC_AGG_DT$G5_liberte_mouvements != "Non"] <- "SL"
LOC_AGG_DT$G4_relation_deplaces_pnd[LOC_AGG_DT$D1_groupe_population_present_pdi != "Oui"] <- "SL"
# Version fevrier 2021 : quels étaient les principaux lieux où se logaient les personnes déplacées et/ou retournées, seulement s'il y a des PDI et/ou retournés
# x1 = "D1_groupe_population_present_pdi"
# x2 = "D1_groupe_population_present_retournes"
#
# y = "I1_lieux_principal_pdi_retournes"
#
# var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(y)])
#
# for(i in var.to.change){
#   LOC_AGG_DT[[i]][LOC_AGG_DT[[x1]] != "1" & LOC_AGG_DT[[x2]] != "1"] <- "SL"
# }
# Meme code que le precedent, juste pour tester le problème de format de données sur la colonne groupe de population, parfois "1" ou "Oui"
x1 = "D1_groupe_population_present_pdi"
x2 = "D1_groupe_population_present_retournes"
y = "I1_lieux_principal_pdi_retournes"
var.to.change = names(LOC_AGG_DT[ , .SD, .SDcols = patterns(y)])
for(i in var.to.change){
LOC_AGG_DT[[i]][LOC_AGG_DT[[x1]] != "Oui" & LOC_AGG_DT[[x2]] != "Oui"] <- "SL"
}
LOC_AGG_DT$I1_abris_principal_hote[LOC_AGG_DT$D1_groupe_population_present_pnd != "Oui"] <- "SL"
LOC_AGG_DT$I1_abris_principal_pdi_retournes[LOC_AGG_DT$D1_groupe_population_present_pdi != 1 & LOC_AGG_DT$D1_groupe_population_present_retournes != 1] <- "SL"
LOC_AGG_DT$I1_abris_principal_pdi_retournes_autres[LOC_AGG_DT$I1_abris_principal_pdi_retournes != "Autre"] <- "SL"
LOC_AGG_DT$I2_proportion_abris_detruits[LOC_AGG_DT$I2_abris_detruits != "Oui"] <- "SL"
LOC_AGG_DT$I2_raison_abris_detruits[LOC_AGG_DT$I2_abris_detruits != "Oui"] <- "SL"
LOC_AGG_DT$I2_raison_abris_detruits_autre[LOC_AGG_DT$I2_abris_detruits != "Autre"] <- "SL"
# Version Fevrier 2021
LOC_AGG_DT$I1_type_abris_pdi_retournes_sursitespontane[LOC_AGG_DT$I1_lieux_principal_pdi_retournes_site_spontane != "1"] <- "SL"
#LOC_AGG_DT$I1_type_abris_pdi_retournes_sursitespontane_autre[LOC_AGG_DT$I1_type_abris_pdi_retournes_sursitespontane != "Autre (préciser)"]<-"SL"
LOC_AGG_DT$I1_type_abris_pdi_retournes_en_accueil[LOC_AGG_DT$I1_lieux_principal_pdi_retournes_famille_accueil_logementloue_prete != 1] <- "SL"
LOC_AGG_DT$J1_bna_non_disponibles_autre_preciser[LOC_AGG_DT$J1_bna_non_disponibles_autre != "1"] <- "SL"
LOC_AGG_DT$K2_limites_acces_source_eau_autre_preciser[LOC_AGG_DT$K2_limites_acces_source_eau_autre != "1"] <- "SL"
LOC_AGG_DT$K3_confirmation_non_utilisation_latrines[LOC_AGG_DT$K3_utilisation_latrines != "Non"] <- "SL"
LOC_AGG_DT$K3_cause_non_utilisation_latrines[LOC_AGG_DT$K3_utilisation_latrines != "Non"] <- "SL"
LOC_AGG_DT$K3_cause_non_utilisation_latrines_autre[LOC_AGG_DT$K3_cause_non_utilisation_latrines != "Autre (préciser)"] <- "SL"
LOC_AGG_DT$K4_methode_lavage_main_autre[LOC_AGG_DT$K4_methode_lavage_main != "Autre"] <- "SL"
LOC_AGG_DT$L1_raison_presence_ecole_primaire_non[LOC_AGG_DT$L1_presence_ecole_primaire != "Non"]= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_proportion_frequentation_primaire_garcons= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_proportion_frequentation_primaire_filles= "SL"
LOC_AGG_DT[-which((L1_proportion_frequentation_primaire_garcons == "Tous (100%)" | L1_proportion_frequentation_primaire_garcons == "Ne sait pas" | L1_proportion_frequentation_primaire_garcons == "SL"| L1_proportion_frequentation_primaire_garcons == "NC") & L1_presence_ecole_primaire=="Oui")]$L1_raison_frequentation_primaire_garcons_non= "SL"
LOC_AGG_DT[-which((L1_proportion_frequentation_primaire_filles == "Tous (100%)" | L1_proportion_frequentation_primaire_filles == "Ne sait pas" | L1_proportion_frequentation_primaire_filles == "SL"| L1_proportion_frequentation_primaire_filles == "NC") & L1_presence_ecole_primaire=="Oui")]$L1_raison_frequentation_primaire_filles_non= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_lieu_education_primaire= "SL"
LOC_AGG_DT[L2_presence_ecole_secondaire != "Oui"]$L2_proportion_frequentation_secondaire_garcons= "SL"
LOC_AGG_DT[L2_presence_ecole_secondaire != "Oui"]$L2_proportion_frequentation_secondaire_filles= "SL"
#x = c("Les écoles n'ont pas rouvert suite à la période de fermeture liée au COVID-19",
#     "Enseignants ont arrêté de travailller car non-payés",
#    "Enseignants ont arrêté de travailler suite à une crise dans la localité")
x = c("Les écoles sont fermées dans le cadre de la lutte contre le COVID-19",
"Enseignants ont arrêté de travailller car non-payés",
"Enseignants ont arrêté de travailler suite à une crise dans la localité")
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_proportion_enseignement_primaire_distance= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_presence_mecanisme_continuation_education_primaire= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_aggravation_problemes_protection= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_principale_activite_enfants_primaire= "SL"
LOC_AGG_DT$L1_raison_presence_ecole_primaire_non[LOC_AGG_DT$L1_presence_ecole_primaire != "Non"]= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_proportion_frequentation_primaire_garcons= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_proportion_frequentation_primaire_filles= "SL"
LOC_AGG_DT[-which((L1_proportion_frequentation_primaire_garcons == "Tous (100%)" | L1_proportion_frequentation_primaire_garcons == "Ne sait pas" | L1_proportion_frequentation_primaire_garcons == "SL"| L1_proportion_frequentation_primaire_garcons == "NC") & L1_presence_ecole_primaire=="Oui")]$L1_raison_frequentation_primaire_garcons_non= "SL"
LOC_AGG_DT[-which((L1_proportion_frequentation_primaire_filles == "Tous (100%)" | L1_proportion_frequentation_primaire_filles == "Ne sait pas" | L1_proportion_frequentation_primaire_filles == "SL"| L1_proportion_frequentation_primaire_filles == "NC") & L1_presence_ecole_primaire=="Oui")]$L1_raison_frequentation_primaire_filles_non= "SL"
LOC_AGG_DT[L1_type_education_primaire %in% c("Aucune forme d'éducation (au-delà de l'éducation familiale)", "NC")]$L1_lieu_education_primaire= "SL"
LOC_AGG_DT[L2_presence_ecole_secondaire != "Oui"]$L2_proportion_frequentation_secondaire_garcons= "SL"
LOC_AGG_DT[L2_presence_ecole_secondaire != "Oui"]$L2_proportion_frequentation_secondaire_filles= "SL"
#x = c("Les écoles n'ont pas rouvert suite à la période de fermeture liée au COVID-19",
#     "Enseignants ont arrêté de travailller car non-payés",
#    "Enseignants ont arrêté de travailler suite à une crise dans la localité")
x = c("Les écoles sont fermées dans le cadre de la lutte contre le COVID-19",
"Enseignants ont arrêté de travailller car non-payés",
"Enseignants ont arrêté de travailler suite à une crise dans la localité")
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_proportion_enseignement_primaire_distance= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_presence_mecanisme_continuation_education_primaire= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_aggravation_problemes_protection= "SL"
LOC_AGG_DT[L1_raison_presence_ecole_primaire_non %!in% x]$L3_ecole_fermee_principale_activite_enfants_primaire= "SL"
LOC_AGG_DT$M1_source_information_fiable_covid_autre[LOC_AGG_DT$M1_source_information_fiable_covid != "Autre"] <- "SL"
# Version fevrier 2021 : `M1_source_information` a été enlevée
#LOC_AGG_DT[M1_source_information == "Autre"]$M1_source_information_autre = "SL"
a = c("Pas de réponse / ne souhaite pas répondre",
"Je ne sais pas",
"aucun (la localité ne reçoit aucun nouvelle)",
"NC")
LOC_AGG_DT$M1_pourvoyeur_information[LOC_AGG_DT$M1_source_information %in% a] <- "SL"
LOC_AGG_DT$M1_pourvoyeur_information_autre[LOC_AGG_DT$M1_pourvoyeur_information != "Autre"] <- "SL"
LOC_AGG_DT$M2_reseau_disponible[LOC_AGG_DT$M1_source_information %in% a] <- "SL"
LOC_AGG_DT$M3_source_information_preferee[LOC_AGG_DT$M1_source_information %in% a] <- "SL"
LOC_AGG_DT$M3_source_information_preferee_autre[LOC_AGG_DT$M3_source_information_preferee != "Autre"] <- "SL"
LOC_AGG_DT$M4_raison_difficulte_acces_information_aide_humanitaire[LOC_AGG_DT$M4_difficulte_acces_information_aide_humanitaire != "Oui"] <- "SL"
LOC_AGG_DT$M4_raison_difficulte_acces_information_aide_humanitaire_autre[LOC_AGG_DT$M4_raison_difficulte_acces_information_aide_humanitaire != "Autre"] <- "SL"
LOC_AGG_DT$M5_type_information_pertinente_autre[LOC_AGG_DT$M5_type_information_pertinente != "Autre"] <- "SL"
# Version fevrier 2021 : ajout de la section CCCM
LOC_AGG_DT$N1_comite_communautaire[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_femme[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_paix[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_developpement[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_jeunes[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_gestion_infrastructure[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_deplaces[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_comite_comite_agricole[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_comite_communautaire_type_autre[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui"]<-"SL"
LOC_AGG_DT$N1_acces_structure_communautaire_pdi[LOC_AGG_DT$N1_presence_comite_communautaire!="Oui" | LOC_AGG_DT$D1_groupe_population_present_pdi != "Oui"]<-"SL"
LOC_AGG_DT$N1_participation_structure_communautaire_pdi[(LOC_AGG_DT$N1_acces_structure_communautaire_pdi != "Oui, le(s) comité(s) communautaire(s) sont ouvert(s) aux déplacés" & LOC_AGG_DT$N1_acces_structure_communautaire_pdi != "Oui, une partie de(s) comité(s) communautaire(s) sont ouvert(s) aux déplacés") | LOC_AGG_DT$D1_groupe_population_present_pdi != "Oui"]<-"SL"
write.csv2(LOC_AGG_DT, AGGREGATED_DATASET, na = "NA", row.names = FALSE)
# LOC_AGG_DT = LOC_AGG_DT[,lapply(.SD, factor)]
LOC_AGG_DT = LOC_AGG_DT[,lapply(.SD, factor, exclude=c("SL", ""))]
questions$select = sapply(strsplit(questions$type, " "), function(x){x[1]})
questions$listname <-sapply(strsplit(questions$type, " "), function(x){x[2]})
levels.lab = questions[select == "select_one", .(listname, name)]
questions$select = sapply(strsplit(questions$type, " "), function(x){x[1]})
questions$listname <-sapply(strsplit(questions$type, " "), function(x){x[2]})
levels.lab = questions[select == "select_one", .(listname, name)]
levels.lab_to_w = NAMES_DT %>% select(name_kobo, name_R)
levels.lab <- levels.lab_to_w %>% filter(name_R %in% levels.lab$name)
levels.lab <- levels.lab %>% filter(name_R %in% names(LOC_AGG_DT))
levels.lab <- as.data.table(levels.lab)
LOC_AGG_DT <- as.data.table(LOC_AGG_DT)
for(i in levels.lab$name_R){
LOC_AGG_DT[[i]] = fct_expand(factor(LOC_AGG_DT[[i]]),
choices[list_name%in%levels.lab[name_R == i]$listname]$label)
}
for(i in levels.lab$name_R){
LOC_AGG_DT[[i]] = fct_relevel(LOC_AGG_DT[[i]],
choices[list_name%in%levels.lab[name_R == i]$listname]$label)
}
LOC_AGG_DT[, F1_lieu_de_soin_hors_structure := fct_other(F1_lieu_de_soin,
keep = "Structure de santé (centre, clinique, hôpital, etc.)")]
levels(LOC_AGG_DT$F1_lieu_de_soin_hors_structure) = c(FALSE, TRUE)
LOC_AGG_DT[, G1_incident_meurtre_type_attaques := fct_other(G1_type_incident_civils_tues_blesses, keep = "Attaque armée/combats")]
levels(LOC_AGG_DT$G1_incident_meurtre_type_attaques) = c(TRUE, FALSE)
# Cette nouvelle variable logique "D1_groupe_population_present_pdi_retourne", aura la valeur TRUE si les PDI est present (1) OU retourne
LOC_AGG_DT[, D1_groupe_population_present_pdi_retournes := D1_groupe_population_present_pdi == "Oui" | D1_groupe_population_present_retournes == "Oui"]
# Mettre en ordre les facteurs de la nouvelle variable"D1_groupe_population_present_pdi_retourne" créée precedement
LOC_AGG_DT[, D1_groupe_population_present_pdi_retournes := factor(D1_groupe_population_present_pdi_retournes,
levels = c(TRUE, FALSE))]
a = c("Entre 45 minutes et 2 heures",
"Plus de deux heures à une demi-journée",
"Plus d'une demi-journée / pas de centre de santé disponible")
# Garder toutes les reponses de la colonne qui correspondent aux elements de la variable a, et metter la valeur "Autre" pour les autres valeurs. CECI Dans le facteur pas dans la base de données aggregée
LOC_AGG_DT[, F1_temps_pied_structure_sante_sup45min := fct_other(F1_temps_pied_structure_sante, keep = a)]
# Garder toutes les reponses de la colonne qui ne correspondent pas aux elements de la variable a, et metter la valeur "Autre" pour celle qui correspondant aux élements ci-haut
LOC_AGG_DT$F1_temps_pied_structure_sante_sup45min = fct_collapse(LOC_AGG_DT$F1_temps_pied_structure_sante_sup45min, x = a)
levels(LOC_AGG_DT$F1_temps_pied_structure_sante_sup45min) = c(TRUE, FALSE)
LOC_AGG_DT[, H1_severite_faim_severe := fct_other(H1_severite_faim,
keep =
c("La faim était sévère, il y avait peu d’options pur réduire les difficultés d’accès à la nourriture"))]
levels(LOC_AGG_DT$H1_severite_faim_severe) = c(TRUE, FALSE)
LOC_AGG_DT[, L1_type_education_primaire_aucun := fct_other(
L1_type_education_primaire, keep = c("Aucune forme d'éducation (au-delà de l'éducation familiale)"))]
levels(LOC_AGG_DT$L1_type_education_primaire_aucun) = c(TRUE, FALSE)
# On enleve les colonnes sur lesquelles on ne calcule pas les effectifs et proportions, Version fevrier 2021 : ajout des variables C1_ pour la localisation de la population en brousse.
varnames = setdiff(names(LOC_AGG_DT), c("month_collection",
"B_ki_coverage", "C_province", "C_zone_sante",
"C_aire_sante", "C_nom_localite_final",
"C_structure_sante_proche_localite",
"C_moyen_evaluation_localite",
"C_moyen_evaluation_localite_distance",
"C_moyen_evaluation_localite_distance_autre",
"C1_localisation_personnes_brousse",
"C1_zone_sante_personne_brousse",
"C1_nom_localite_proche_brousse",
"C1_nom_localite_proche_brousse_autre",
"C1_nom_structsante_proche_brousse"))
FULL_ZS = lapply(varnames, function(x){
keycols <- c("C_province", "C_zone_sante", x)
setkeyv(LOC_AGG_DT, keycols)
a = LOC_AGG_DT[CJ(C_province, C_zone_sante, levels(LOC_AGG_DT[[x]]), unique = TRUE),
.(n = .N), by = .EACHI]
a = a[!is.na(a[[x]])]
a = a[a[[x]] != "SL"]
a = a[a[, .(N = sum(n)), by = c("C_province", "C_zone_sante")],
on=c("C_province", "C_zone_sante")]
a[, prop := round(n/N*100,2)]
a[, variable := x]
a
})
FULL_ZS = rbindlist(FULL_ZS, use.names=FALSE)
names(FULL_ZS)[3] = "answer"
#varnames = c("A_profession", "B_statut_deplacement_IC", "C_moyen_evaluation_localite")
varnames = NAMES_DT[data_by_ki == "data_by_ki"]$name_R
NAMES_DT$data_by_ki
varnames = NAMES_DT %>% filter(data_by_ki == "data_by_ki") %>% select(name_R)
varnames = NAMES_DT %>% filter(data_by_ki == "data_by_ki") %>% select(name_R) %>% as.vector
View(varnames)
KI = lapply(varnames, function(x){
setkeyv(KI_CLEAN_DT, c("C_province", "C_zone_sante", x))
a = KI_CLEAN_DT[CJ(C_province, C_zone_sante, KI_CLEAN_DT[[x]], unique = TRUE),
.(n = .N), by = .EACHI]
a = a[!is.na(a[[x]])]
#a = a[a[[x]] != "SL"]
a = a[a[, .(N = sum(n)), by = c("C_province", "C_zone_sante")],
on=c("C_province","C_zone_sante")]
a[, prop := round(n/N*100,2)]
a[, variable := x]
a
})
varnames = varnames[1,]
varnames = NAMES_DT %>% filter(data_by_ki == "data_by_ki") %>% select(name_R) %>% as.vector
varnames = varnames[,1]
varnames = varnames[,1] %>% as.character
varnames = NAMES_DT %>% filter(data_by_ki == "data_by_ki") %>% select(name_R) %>% as.vector
varnames
varnames = NAMES_DT %>% filter(data_by_ki == "data_by_ki") %>% select(name_R) %>% as.data.frame
View(varnames)
varnames
varnames = varnames[,1] %>% as.character
KI = lapply(varnames, function(x){
setkeyv(KI_CLEAN_DT, c("C_province", "C_zone_sante", x))
a = KI_CLEAN_DT[CJ(C_province, C_zone_sante, KI_CLEAN_DT[[x]], unique = TRUE),
.(n = .N), by = .EACHI]
a = a[!is.na(a[[x]])]
#a = a[a[[x]] != "SL"]
a = a[a[, .(N = sum(n)), by = c("C_province", "C_zone_sante")],
on=c("C_province","C_zone_sante")]
a[, prop := round(n/N*100,2)]
a[, variable := x]
a
})
KI = rbindlist(KI, use.names=FALSE)
names(KI)[3] = "answer"
FULL_ZS_bind = rbind(FULL_ZS, KI)
ZS$C_zone_sante <- ZS$zs
C_zone_sante <- ZS %>% pull(C_zone_sante, `202104`)
cover_status <- names(C_zone_sante)
ZS_coverage <- cbind(C_zone_sante, cover_status) %>% as.data.frame
FULL_ZS_merged <- dplyr::left_join(FULL_ZS_bind, ZS_coverage, by="C_zone_sante")
FULL_ZS <- FULL_ZS_merged
FULL_ZS = FULL_ZS[, .(variable, answer, C_province, C_zone_sante, cover_status, n, N, prop)]
FULL_ZS$answer = enc2utf8(as.character(FULL_ZS$answer))
FULL_ZS$variable = enc2utf8(as.character(FULL_ZS$variable))
fwrite(FULL_ZS, ANALYSED_ZS)
write.csv2(FULL_ZS,ANALYSED_ZS)
FULL_P = FULL_ZS[, .(n = sum(n)), by=.(C_province, variable, answer)]
FULL_P = FULL_P[FULL_ZS[, .(N = sum(n)), by=.(C_province, variable)], on = .(C_province, variable)]
TXT_LAB <- read_excel("input/others/REACH_DRC_HSM_Labels_R_to_InDesign_202105.xlsx")
REACH_DRC_HSM_Labels_R_to_InDesign_202104TXT_LAB = as.data.table(TXT_LAB)
TXT_LAB <- read_excel("input/others/REACH_DRC_HSM_Labels_R_to_InDesign_203105.xlsx")
TXT_LAB = as.data.table(TXT_LAB)
for(i in 1:nrow(TXT_LAB)){
FULL_ZS[answer %in% TXT_LAB$Label_R[[i]]]$answer = TXT_LAB$Label_InDesign[[i]]
}
for(i in 1:nrow(TXT_LAB)){
FULL_ZS[answer %in% TXT_LAB$Label_R[[i]]]$answer = TXT_LAB$Label_InDesign[[i]]
}
TXT_LAB <- read_excel("input/others/REACH_DRC_HSM_Labels_R_to_InDesign_203105.xlsx")
TXT_LAB = as.data.table(TXT_LAB)
for(i in 1:nrow(TXT_LAB)){
FULL_ZS[answer %in% TXT_LAB$Label_R[[i]]]$answer = TXT_LAB$Label_InDesign[[i]]
}
FULL_ZS$answer = gsub(" / ", "/", FULL_ZS$answer)
FULL_ZS$answer = gsub("/ ", "/", FULL_ZS$answer)
FULL_ZS$answer = gsub(" /", "/", FULL_ZS$answer)
for(i in 1:nrow(TXT_LAB)){
FULL_P[answer %in% TXT_LAB$Label_R[[i]]]$answer = TXT_LAB$Label_InDesign[[i]]
}
FULL_P$answer = gsub(" / ", "/", FULL_P$answer)
FULL_P$answer = gsub("/ ", "/", FULL_P$answer)
FULL_P$answer = gsub(" /", "/", FULL_P$answer)
COV_ZS = FULL_ZS[cover_status %in% "X" & N > 3]
COV_ZS$cover_status = NULL
varnames = NAMES_DT[prov_multinom == "All"]$name_R
NAMES_DT$prov_multinom
varnames = NAMES_DT %>% filter(prov_multinom == "Top3_GroupBinom") %>% select(name_R) %>% as.data.frame
varnames = varnames[,1] %>% as.character
All_Multinom = lapply(varnames, function(x){
if(x %in% FULL_P$variable == TRUE){
a = FULL_P[variable %in% x]
a$prop = round(a$prop, 0)
top = nlevels(factor(a$answer))
a = dcast(a, C_province ~ ., value.var = c("answer","prop","n"), fun=list)
a = a[, rn := .I][, c(transpose(answer),
transpose(prop),
transpose(n)), by = .(C_province, rn)][,-c("rn")]
names(a)[-1] = paste(rep(c("Name","Per","Nb"), each=top), rep(x,top*3), 1:top, sep="_")
a
}
})
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
options(kableExtra.latex.load_packages =FALSE)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
options(kableExtra.latex.load_packages =FALSE)
library(knitr)
library(kableExtra)
library(readxl)
library(magrittr)
library(dplyr)
library(tibble)
library(readxl)
library(data.table)
library(forcats)
library(lubridate)
library(testthat)
#devtools::install_github("ellieallien/koboquest")
library(koboquest)
library(stringi)
library(stringr)
month_collection <- "202109"
NAMES_DT <- paste0("input/others/REACH_DRC_HSM_Aggregation_IDDformatting_", month_collection, ".xlsx")
NAMES_DT = read_excel(NAMES_DT, sheet="Mai")
NAMES_DT = as.data.table(NAMES_DT)[order(index)]
NAMES_DT <- paste0("input/others/REACH_DRC_HSM_Aggregation_IDDformatting_", month_collection, ".xlsx")
NAMES_DT = read_excel(NAMES_DT, sheet="Mai")
NAMES_DT = as.data.table(NAMES_DT)[order(index)]
ZS <- fread("input/others/REACH_DRC_HSM_Couverture.csv", encoding = "UTF-8", header = T)
cover_status = rev(names(ZS))[1]
TXT_LAB <- "input/others/REACH_DRC_HSM_Labels_R_to_InDesign_202105.xls"
CLEANED_DT <- c(
"input/data/DRC2003_HSM_Cleaned Data_202109_Nord-Kivu_VALIDATED_GIS edited_npi_20211001.xlsm",
"input/data/REACH_DRC_HSM_Dataset_Sud Kivu_2021_09_24_npi_GISedited_VALIDATED.xlsm",
"input/data/REACH_DRC_HSM_Dataset_Tanganyika_2021_09_24_npi_GIS edited_VALIDATED.xlsm"
)
KI_CLEAN_DT <- lapply(CLEANED_DT, function(x){
as.data.table(read_excel(x, sheet = "Clean Data"))
})
KI_CLEAN_DT <- lapply(CLEANED_DT, function(x){
as.data.table(read_excel(x, sheet = "Clean Data"))
})
KI_CLEAN_DT = rbindlist(KI_CLEAN_DT)
## Check that all the names in KI_CLEAN_DT are in the names_DT dataset
names(KI_CLEAN_DT) = c(NAMES_DT$name_R)
KI_CLEAN_DT$C_zone_sante %<>% str_to_title
KI_CLEAN_DT$C_nom_localite_final %<>% str_to_title
#veuillez saisir la date de début du dernier mois (format aa-mm-jj)
debut_dernier_mois<- "2021-09-01"
label_debut_dernier_mois<- "Au cours du dernier mois"
#veuillez saisir la date de début et de fin du quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T4 <- c("2021-05-01","2021-08-31")
label_T4<- "En 2021: entre mai et aout (T2)"
#veuillez indiquer la date de début et de fin du SECOND quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T3<- c("2021-01-01","2021-04-30")
label_T3<- "En 2021: entre janvier et avril (T1)"
#veuillez indiquer la date de début et de fin du QUATRIÈME  trimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T1<- c("2020-01-01","2020-12-31")
label_T1<- "Entre janvier et décembre 2020 (S1)"
#Veuillez indiquer la date limite pour laquelle il sera "avant le ...", ainsi que sa catégorisation.
T0<- c("2019-12-31")
label_T0<- "Avant 2020"
get_category_mouvement_duration <- function(date_mouvement){
x <- as.Date(as.character(date_mouvement), format="%Y-%m-%d")
x <- case_when(x >= as.Date(debut_dernier_mois, format="%Y-%m-%d") ~ label_debut_dernier_mois,
x >= as.Date(T4[1], format="%Y-%m-%d") & x <= as.Date(T4[2], format="%Y-%m-%d") ~ label_T4,
x >= as.Date(T3[1], format="%Y-%m-%d") & x <= as.Date(T3[2], format="%Y-%m-%d") ~ label_T3,
x >= as.Date(T2[1], format="%Y-%m-%d") & x <= as.Date(T2[2], format="%Y-%m-%d") ~ label_T2,
x >= as.Date(T1[1], format="%Y-%m-%d") & x <= as.Date(T1[2], format="%Y-%m-%d") ~ label_T1,
x <= as.Date(T0, format="%Y-%m-%d") ~ label_T0)
return(x)
}
# Transformation des données date de mouvement PDI et rétournés en categorie
KI_CLEAN_DT$D3_date_dernier_mouvement_pdi <- get_category_mouvement_duration(KI_CLEAN_DT$D3_date_dernier_mouvement_pdi)
#veuillez saisir la date de début du dernier mois (format aa-mm-jj)
debut_dernier_mois<- "2021-09-01"
label_debut_dernier_mois<- "Au cours du dernier mois"
#veuillez saisir la date de début et de fin du quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T3 <- c("2021-05-01","2021-08-31")
label_T4<- "En 2021: entre mai et aout (T2)"
#veuillez indiquer la date de début et de fin du SECOND quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T2<- c("2021-01-01","2021-04-30")
label_T3<- "En 2021: entre janvier et avril (T1)"
#veuillez indiquer la date de début et de fin du QUATRIÈME  trimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T1<- c("2020-01-01","2020-12-31")
label_T1<- "Entre janvier et décembre 2020 (S1)"
#Veuillez indiquer la date limite pour laquelle il sera "avant le ...", ainsi que sa catégorisation.
T0<- c("2019-12-31")
label_T0<- "Avant 2020"
get_category_mouvement_duration <- function(date_mouvement){
x <- as.Date(as.character(date_mouvement), format="%Y-%m-%d")
x <- case_when(x >= as.Date(debut_dernier_mois, format="%Y-%m-%d") ~ label_debut_dernier_mois,
#x >= as.Date(T4[1], format="%Y-%m-%d") & x <= as.Date(T4[2], format="%Y-%m-%d") ~ label_T4,
x >= as.Date(T3[1], format="%Y-%m-%d") & x <= as.Date(T3[2], format="%Y-%m-%d") ~ label_T3,
x >= as.Date(T2[1], format="%Y-%m-%d") & x <= as.Date(T2[2], format="%Y-%m-%d") ~ label_T2,
x >= as.Date(T1[1], format="%Y-%m-%d") & x <= as.Date(T1[2], format="%Y-%m-%d") ~ label_T1,
x <= as.Date(T0, format="%Y-%m-%d") ~ label_T0)
return(x)
}
# Transformation des données date de mouvement PDI et rétournés en categorie
KI_CLEAN_DT$D3_date_dernier_mouvement_pdi <- get_category_mouvement_duration(KI_CLEAN_DT$D3_date_dernier_mouvement_pdi)
#veuillez saisir la date de début du dernier mois (format aa-mm-jj)
debut_dernier_mois<- "2021-09-01"
label_debut_dernier_mois<- "Au cours du dernier mois"
#veuillez saisir la date de début et de fin du quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T3 <- c("2021-05-01","2021-08-31")
label_T3<- "En 2021: entre mai et aout (T2)"
#veuillez indiquer la date de début et de fin du SECOND quadrimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T2<- c("2021-01-01","2021-04-30")
label_T2<- "En 2021: entre janvier et avril (T1)"
#veuillez indiquer la date de début et de fin du QUATRIÈME  trimestre le plus récent (format aa-mm-jj), ainsi que sa catégorisation.
T1<- c("2020-01-01","2020-12-31")
label_T1<- "Entre janvier et décembre 2020 (S1)"
#Veuillez indiquer la date limite pour laquelle il sera "avant le ...", ainsi que sa catégorisation.
T0<- c("2019-12-31")
label_T0<- "Avant 2020"
get_category_mouvement_duration <- function(date_mouvement){
x <- as.Date(as.character(date_mouvement), format="%Y-%m-%d")
x <- case_when(x >= as.Date(debut_dernier_mois, format="%Y-%m-%d") ~ label_debut_dernier_mois,
#x >= as.Date(T4[1], format="%Y-%m-%d") & x <= as.Date(T4[2], format="%Y-%m-%d") ~ label_T4,
x >= as.Date(T3[1], format="%Y-%m-%d") & x <= as.Date(T3[2], format="%Y-%m-%d") ~ label_T3,
x >= as.Date(T2[1], format="%Y-%m-%d") & x <= as.Date(T2[2], format="%Y-%m-%d") ~ label_T2,
x >= as.Date(T1[1], format="%Y-%m-%d") & x <= as.Date(T1[2], format="%Y-%m-%d") ~ label_T1,
x <= as.Date(T0, format="%Y-%m-%d") ~ label_T0)
return(x)
}
# Transformation des données date de mouvement PDI et rétournés en categorie
KI_CLEAN_DT$D3_date_dernier_mouvement_pdi <- get_category_mouvement_duration(KI_CLEAN_DT$D3_date_dernier_mouvement_pdi)
KI_CLEAN_DT$D3_date_dernier_mouvement_retournes <- get_category_mouvement_duration(KI_CLEAN_DT$D3_date_dernier_mouvement_retournes)
kobofile <- "input/others/REACH_DRC_HSM_Kobo_202105.xlsx"
questions = read_excel(kobofile, sheet = "survey")
kobofile <- "input/others/REACH_DRC_HSM_Kobo_202109.xlsx"
questions = read_excel(kobofile, sheet = "survey")
questions = as.data.table(questions)
choices = read_excel(kobofile, sheet = "choices")
## Test that everything is good with questionnaire loading
questionnaire <- load_questionnaire(KI_CLEAN_DT, questions, choices)
questionnaire$question_type("I1_lieux_principal_pdi_retournes")
#warnings()
choices2 = unique(choices[,1:3])
choices = as.data.table(choices)
AGGREGATED_DATASET <- paste("output/REACH_DRC_HSM_Aggregated_SK_NK_TGK_",
month_collection,".csv", sep="")
ANALYSED_ZS <- paste("output/REACH_DRC_HSM_Analysed_",
month_collection,".csv", sep="")
ANALYSED_FULL_P <- paste("output/REACH_DRC_HSM_Analysed_all_province_",
month_collection,".csv", sep="")
INDESIGN_P <- paste("output/REACH_DRC_HSM_InDesign_province_",
month_collection,".csv", sep="")
source("./aok_functions_GB.R")
source("./aok_functions_GB.R")
# Recuperer les noms de fonctions qui sont dans le fichier de correspondance
fun.to.run = levels(factor(NAMES_DT$function_agg))
aggregate_by_aok_function <- function(fun.to.run, KI_dataset){
aggregated_dataset <- lapply(fun.to.run, function(x){
KI_dataset[, lapply(.SD, eval(parse(text = x))),
by = .(C_province, C_zone_sante, C_nom_localite_final),
.SDcols = c(NAMES_DT %>% filter(function_agg == x) %>% pull(name_R))]
})
return(aggregated_dataset)
}
# Pour chaque variable de la base de données, executer la fonction specifique selon la definition de fichier de correspondance.
LOC_AGG_DT = aggregate_by_aok_function(fun.to.run, KI_CLEAN_DT)
